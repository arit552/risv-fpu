module division(clk,A,B,result);
input clk;
input [31:0]A;
input [31:0]B;
output [31:0] result;
wire [7:0] exponent;
wire [31:0] temp1,temp2,temp3,temp4,temp5,temp6,temp7;
wire [31:0] reciprocal;
wire [31:0] a,b,c,d;

//TO take reciprocal of B
multiplication M1(.A({{1'b0,8'd126,B[22:0]}}),.B(32'h40000000),.clk(clk),.result(temp1));//40000000=2.0
addition A1(.A(32'h4034b4b0),.B({1'b1,temp1[30:0]}),.result(a));
multiplication M2(.A({{1'b0,8'd126,B[22:0]}}),.B(a),.clk(clk),.result(temp2));
addition A2(.A(32'h40000000),.B({!temp2[31],temp2[30:0]}),.result(temp3));
multiplication M3(.A(a),.B(temp3),.clk(clk),.result(b));
multiplication M4(.A({1'b0,8'd126,B[22:0]}),.B(b),.clk(clk),.result(temp4));
addition A3(.A(32'h40000000),.B({!temp4[31],temp4[30:0]}),.result(temp5));
multiplication M5(.A(b),.B(temp5),.clk(clk),.result(c));
multiplication M6(.A({1'b0,8'd126,B[22:0]}),.B(c),.clk(clk),.result(temp6));
addition A4(.A(32'h40000000),.B({!temp6[31],temp6[30:0]}),.result(temp7));
multiplication M7(.A(c),.B(temp7),.clk(clk),.result(d));
assign exponent = d[30:23]+8'd126-B[30:23];
assign reciprocal = {B[31],exponent,d[22:0]};
multiplication M8(.A(A),.B(reciprocal),.clk(clk),.result(result));
endmodule

// addition module
module addition(clk,A,B,result);
input clk;
input [31:0]A;
input [31:0]B;
output reg  [31:0] result;
reg [23:0] A_Mantissa,B_Mantissa;
reg [23:0] Temp_Mantissa;
reg [22:0] Mantissa;
reg [7:0] Exponent;
reg Sign;
reg [7:0] A_Exponent,B_Exponent,Temp_Exponent,diff_Exponent;
reg A_sign,B_sign,Temp_sign;
reg carry;
reg comp;
reg [7:0] exp_adjust;
integer n;
always @(*)
begin

comp =  (A[30:23] >= B[30:23])? 1'b1 : 1'b0;
  
A_Mantissa = comp ? {1'b1,A[22:0]} : {1'b1,B[22:0]};
A_Exponent = comp ? A[30:23] : B[30:23];
A_sign = comp ? A[31] : B[31];
  
B_Mantissa = comp ? {1'b1,B[22:0]} : {1'b1,A[22:0]};
B_Exponent = comp ? B[30:23] : A[30:23];
B_sign = comp ? B[31] : A[31];

diff_Exponent = A_Exponent-B_Exponent;
B_Mantissa = (B_Mantissa >> diff_Exponent);
{carry,Temp_Mantissa} =  (A_sign ~^ B_sign)? A_Mantissa + B_Mantissa : A_Mantissa-B_Mantissa ; 
exp_adjust = A_Exponent;
if(carry)
    begin
        Temp_Mantissa = Temp_Mantissa>>1;
        exp_adjust = exp_adjust+1'b1;
    end
else
 
  if (!Temp_Mantissa[23])
        begin
           Temp_Mantissa = Temp_Mantissa<<1;
           exp_adjust =  exp_adjust-1'b1;
        end

Sign = A_sign;
Mantissa = Temp_Mantissa[22:0];
Exponent = exp_adjust;
result = {Sign,Exponent,Mantissa};
end
endmodule
//multiplication module
module multiplication(clk,A,B,result);
input clk;
input [31:0]A;
input [31:0]B;
output reg  [31:0] result;
reg [23:0] A_Mantissa,B_Mantissa;
reg [22:0] Mantissa;
reg [47:0] Temp_Mantissa;
reg [7:0] A_Exponent,B_Exponent,Temp_Exponent,diff_Exponent,Exponent;
reg A_sign,B_sign,Sign;

always@(*)
begin
A_Mantissa = {1'b1,A[22:0]};
A_Exponent = A[30:23];
A_sign = A[31];
  
B_Mantissa = {1'b1,B[22:0]};
B_Exponent = B[30:23];
B_sign = B[31];

Temp_Exponent = A_Exponent+B_Exponent-127;
Temp_Mantissa = A_Mantissa*B_Mantissa;
Mantissa = Temp_Mantissa[47] ? Temp_Mantissa[46:24] : Temp_Mantissa[45:23];
Exponent = Temp_Mantissa[47] ? Temp_Exponent+1'b1 : Temp_Exponent;
Sign = A_sign^B_sign;
result = {Sign,Exponent,Mantissa};
end
endmodule